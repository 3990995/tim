// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package protocol

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ITim interface {
	// Parameters:
	//  - Param
	TimStream(param *TimParam) (err error)
	TimStarttls() (err error)
	// Parameters:
	//  - Tid
	//  - Pwd
	TimLogin(tid *Tid, pwd string) (err error)
	// Parameters:
	//  - Ab
	TimAck(ab *TimAckBean) (err error)
	// Parameters:
	//  - Pbean
	TimPresence(pbean *TimPBean) (err error)
	// Parameters:
	//  - Mbean
	TimMessage(mbean *TimMBean) (err error)
	// Parameters:
	//  - ThreadId
	TimPing(threadId string) (err error)
	// Parameters:
	//  - E
	TimError(e *TimError) (err error)
	TimLogout() (err error)
	// Parameters:
	//  - Tid
	//  - Auth
	TimRegist(tid *Tid, auth string) (err error)
	// Parameters:
	//  - Roster
	TimRoser(roster *TimRoster) (err error)
	// Parameters:
	//  - TimMsgIq
	//  - IqType
	TimMessageIq(timMsgIq *TimMessageIq, iqType string) (err error)
	// Parameters:
	//  - Mbean
	TimMessageResult_(mbean *TimMBean) (err error)
	// Parameters:
	//  - Tid
	//  - Pwd
	TimRemoteUserAuth(tid *Tid, pwd string) (r *TimRemoteUserBean, err error)
	// Parameters:
	//  - Tid
	TimRemoteUserGet(tid *Tid) (r *TimRemoteUserBean, err error)
	// Parameters:
	//  - Tid
	//  - Ub
	TimRemoteUserEdit(tid *Tid, ub *TimUserBean) (r *TimRemoteUserBean, err error)
	// Parameters:
	//  - Pbean
	TimResponsePresence(pbean *TimPBean) (r *TimResponseBean, err error)
	// Parameters:
	//  - Mbean
	TimResponseMessage(mbean *TimMBean) (r *TimResponseBean, err error)
}

type ITimClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewITimClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ITimClient {
	return &ITimClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewITimClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ITimClient {
	return &ITimClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Param
func (p *ITimClient) TimStream(param *TimParam) (err error) {
	if err = p.sendTimStream(param); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimStream(param *TimParam) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timStream", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimStreamArgs{
		Param: param,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) TimStarttls() (err error) {
	if err = p.sendTimStarttls(); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimStarttls() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timStarttls", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimStarttlsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Tid
//  - Pwd
func (p *ITimClient) TimLogin(tid *Tid, pwd string) (err error) {
	if err = p.sendTimLogin(tid, pwd); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimLogin(tid *Tid, pwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timLogin", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimLoginArgs{
		Tid: tid,
		Pwd: pwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Ab
func (p *ITimClient) TimAck(ab *TimAckBean) (err error) {
	if err = p.sendTimAck(ab); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimAck(ab *TimAckBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timAck", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimAckArgs{
		Ab: ab,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Pbean
func (p *ITimClient) TimPresence(pbean *TimPBean) (err error) {
	if err = p.sendTimPresence(pbean); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimPresence(pbean *TimPBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timPresence", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimPresenceArgs{
		Pbean: pbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Mbean
func (p *ITimClient) TimMessage(mbean *TimMBean) (err error) {
	if err = p.sendTimMessage(mbean); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimMessage(mbean *TimMBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timMessage", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimMessageArgs{
		Mbean: mbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ThreadId
func (p *ITimClient) TimPing(threadId string) (err error) {
	if err = p.sendTimPing(threadId); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimPing(threadId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timPing", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimPingArgs{
		ThreadId: threadId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - E
func (p *ITimClient) TimError(e *TimError) (err error) {
	if err = p.sendTimError(e); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimError(e *TimError) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timError", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimErrorArgs{
		E: e,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) TimLogout() (err error) {
	if err = p.sendTimLogout(); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimLogout() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timLogout", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimLogoutArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Tid
//  - Auth
func (p *ITimClient) TimRegist(tid *Tid, auth string) (err error) {
	if err = p.sendTimRegist(tid, auth); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimRegist(tid *Tid, auth string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timRegist", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimRegistArgs{
		Tid:  tid,
		Auth: auth,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Roster
func (p *ITimClient) TimRoser(roster *TimRoster) (err error) {
	if err = p.sendTimRoser(roster); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimRoser(roster *TimRoster) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timRoser", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimRoserArgs{
		Roster: roster,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - TimMsgIq
//  - IqType
func (p *ITimClient) TimMessageIq(timMsgIq *TimMessageIq, iqType string) (err error) {
	if err = p.sendTimMessageIq(timMsgIq, iqType); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimMessageIq(timMsgIq *TimMessageIq, iqType string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timMessageIq", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimMessageIqArgs{
		TimMsgIq: timMsgIq,
		IqType:   iqType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Mbean
func (p *ITimClient) TimMessageResult_(mbean *TimMBean) (err error) {
	if err = p.sendTimMessageResult_(mbean); err != nil {
		return
	}
	return
}

func (p *ITimClient) sendTimMessageResult_(mbean *TimMBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timMessageResult", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ITimTimMessageResultArgs{
		Mbean: mbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Tid
//  - Pwd
func (p *ITimClient) TimRemoteUserAuth(tid *Tid, pwd string) (r *TimRemoteUserBean, err error) {
	if err = p.sendTimRemoteUserAuth(tid, pwd); err != nil {
		return
	}
	return p.recvTimRemoteUserAuth()
}

func (p *ITimClient) sendTimRemoteUserAuth(tid *Tid, pwd string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timRemoteUserAuth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ITimTimRemoteUserAuthArgs{
		Tid: tid,
		Pwd: pwd,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) recvTimRemoteUserAuth() (value *TimRemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "timRemoteUserAuth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "timRemoteUserAuth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "timRemoteUserAuth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "timRemoteUserAuth failed: invalid message type")
		return
	}
	result := ITimTimRemoteUserAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Tid
func (p *ITimClient) TimRemoteUserGet(tid *Tid) (r *TimRemoteUserBean, err error) {
	if err = p.sendTimRemoteUserGet(tid); err != nil {
		return
	}
	return p.recvTimRemoteUserGet()
}

func (p *ITimClient) sendTimRemoteUserGet(tid *Tid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timRemoteUserGet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ITimTimRemoteUserGetArgs{
		Tid: tid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) recvTimRemoteUserGet() (value *TimRemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "timRemoteUserGet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "timRemoteUserGet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "timRemoteUserGet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "timRemoteUserGet failed: invalid message type")
		return
	}
	result := ITimTimRemoteUserGetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Tid
//  - Ub
func (p *ITimClient) TimRemoteUserEdit(tid *Tid, ub *TimUserBean) (r *TimRemoteUserBean, err error) {
	if err = p.sendTimRemoteUserEdit(tid, ub); err != nil {
		return
	}
	return p.recvTimRemoteUserEdit()
}

func (p *ITimClient) sendTimRemoteUserEdit(tid *Tid, ub *TimUserBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timRemoteUserEdit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ITimTimRemoteUserEditArgs{
		Tid: tid,
		Ub:  ub,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) recvTimRemoteUserEdit() (value *TimRemoteUserBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "timRemoteUserEdit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "timRemoteUserEdit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "timRemoteUserEdit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "timRemoteUserEdit failed: invalid message type")
		return
	}
	result := ITimTimRemoteUserEditResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Pbean
func (p *ITimClient) TimResponsePresence(pbean *TimPBean) (r *TimResponseBean, err error) {
	if err = p.sendTimResponsePresence(pbean); err != nil {
		return
	}
	return p.recvTimResponsePresence()
}

func (p *ITimClient) sendTimResponsePresence(pbean *TimPBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timResponsePresence", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ITimTimResponsePresenceArgs{
		Pbean: pbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) recvTimResponsePresence() (value *TimResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "timResponsePresence" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "timResponsePresence failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "timResponsePresence failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "timResponsePresence failed: invalid message type")
		return
	}
	result := ITimTimResponsePresenceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mbean
func (p *ITimClient) TimResponseMessage(mbean *TimMBean) (r *TimResponseBean, err error) {
	if err = p.sendTimResponseMessage(mbean); err != nil {
		return
	}
	return p.recvTimResponseMessage()
}

func (p *ITimClient) sendTimResponseMessage(mbean *TimMBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("timResponseMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ITimTimResponseMessageArgs{
		Mbean: mbean,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ITimClient) recvTimResponseMessage() (value *TimResponseBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "timResponseMessage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "timResponseMessage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "timResponseMessage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "timResponseMessage failed: invalid message type")
		return
	}
	result := ITimTimResponseMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ITimProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ITim
}

func (p *ITimProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ITimProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ITimProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewITimProcessor(handler ITim) *ITimProcessor {

	self60 := &ITimProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self60.processorMap["timStream"] = &iTimProcessorTimStream{handler: handler}
	self60.processorMap["timStarttls"] = &iTimProcessorTimStarttls{handler: handler}
	self60.processorMap["timLogin"] = &iTimProcessorTimLogin{handler: handler}
	self60.processorMap["timAck"] = &iTimProcessorTimAck{handler: handler}
	self60.processorMap["timPresence"] = &iTimProcessorTimPresence{handler: handler}
	self60.processorMap["timMessage"] = &iTimProcessorTimMessage{handler: handler}
	self60.processorMap["timPing"] = &iTimProcessorTimPing{handler: handler}
	self60.processorMap["timError"] = &iTimProcessorTimError{handler: handler}
	self60.processorMap["timLogout"] = &iTimProcessorTimLogout{handler: handler}
	self60.processorMap["timRegist"] = &iTimProcessorTimRegist{handler: handler}
	self60.processorMap["timRoser"] = &iTimProcessorTimRoser{handler: handler}
	self60.processorMap["timMessageIq"] = &iTimProcessorTimMessageIq{handler: handler}
	self60.processorMap["timMessageResult"] = &iTimProcessorTimMessageResult_{handler: handler}
	self60.processorMap["timRemoteUserAuth"] = &iTimProcessorTimRemoteUserAuth{handler: handler}
	self60.processorMap["timRemoteUserGet"] = &iTimProcessorTimRemoteUserGet{handler: handler}
	self60.processorMap["timRemoteUserEdit"] = &iTimProcessorTimRemoteUserEdit{handler: handler}
	self60.processorMap["timResponsePresence"] = &iTimProcessorTimResponsePresence{handler: handler}
	self60.processorMap["timResponseMessage"] = &iTimProcessorTimResponseMessage{handler: handler}
	return self60
}

func (p *ITimProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x61 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x61.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x61

}

type iTimProcessorTimStream struct {
	handler ITim
}

func (p *iTimProcessorTimStream) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimStreamArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimStream(args.Param); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimStarttls struct {
	handler ITim
}

func (p *iTimProcessorTimStarttls) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimStarttlsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimStarttls(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimLogin struct {
	handler ITim
}

func (p *iTimProcessorTimLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimLogin(args.Tid, args.Pwd); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimAck struct {
	handler ITim
}

func (p *iTimProcessorTimAck) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimAckArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimAck(args.Ab); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimPresence struct {
	handler ITim
}

func (p *iTimProcessorTimPresence) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimPresenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimPresence(args.Pbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimMessage struct {
	handler ITim
}

func (p *iTimProcessorTimMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimMessage(args.Mbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimPing struct {
	handler ITim
}

func (p *iTimProcessorTimPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimPing(args.ThreadId); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimError struct {
	handler ITim
}

func (p *iTimProcessorTimError) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimErrorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimError(args.E); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimLogout struct {
	handler ITim
}

func (p *iTimProcessorTimLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimLogoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimLogout(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimRegist struct {
	handler ITim
}

func (p *iTimProcessorTimRegist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimRegistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimRegist(args.Tid, args.Auth); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimRoser struct {
	handler ITim
}

func (p *iTimProcessorTimRoser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimRoserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimRoser(args.Roster); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimMessageIq struct {
	handler ITim
}

func (p *iTimProcessorTimMessageIq) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimMessageIqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimMessageIq(args.TimMsgIq, args.IqType); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimMessageResult_ struct {
	handler ITim
}

func (p *iTimProcessorTimMessageResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimMessageResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.TimMessageResult_(args.Mbean); err2 != nil {
		return true, err2
	}
	return true, nil
}

type iTimProcessorTimRemoteUserAuth struct {
	handler ITim
}

func (p *iTimProcessorTimRemoteUserAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimRemoteUserAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("timRemoteUserAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ITimTimRemoteUserAuthResult{}
	var retval *TimRemoteUserBean
	var err2 error
	if retval, err2 = p.handler.TimRemoteUserAuth(args.Tid, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserAuth: "+err2.Error())
		oprot.WriteMessageBegin("timRemoteUserAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("timRemoteUserAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iTimProcessorTimRemoteUserGet struct {
	handler ITim
}

func (p *iTimProcessorTimRemoteUserGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimRemoteUserGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("timRemoteUserGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ITimTimRemoteUserGetResult{}
	var retval *TimRemoteUserBean
	var err2 error
	if retval, err2 = p.handler.TimRemoteUserGet(args.Tid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserGet: "+err2.Error())
		oprot.WriteMessageBegin("timRemoteUserGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("timRemoteUserGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iTimProcessorTimRemoteUserEdit struct {
	handler ITim
}

func (p *iTimProcessorTimRemoteUserEdit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimRemoteUserEditArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("timRemoteUserEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ITimTimRemoteUserEditResult{}
	var retval *TimRemoteUserBean
	var err2 error
	if retval, err2 = p.handler.TimRemoteUserEdit(args.Tid, args.Ub); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserEdit: "+err2.Error())
		oprot.WriteMessageBegin("timRemoteUserEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("timRemoteUserEdit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iTimProcessorTimResponsePresence struct {
	handler ITim
}

func (p *iTimProcessorTimResponsePresence) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimResponsePresenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("timResponsePresence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ITimTimResponsePresenceResult{}
	var retval *TimResponseBean
	var err2 error
	if retval, err2 = p.handler.TimResponsePresence(args.Pbean); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponsePresence: "+err2.Error())
		oprot.WriteMessageBegin("timResponsePresence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("timResponsePresence", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iTimProcessorTimResponseMessage struct {
	handler ITim
}

func (p *iTimProcessorTimResponseMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ITimTimResponseMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("timResponseMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ITimTimResponseMessageResult{}
	var retval *TimResponseBean
	var err2 error
	if retval, err2 = p.handler.TimResponseMessage(args.Mbean); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponseMessage: "+err2.Error())
		oprot.WriteMessageBegin("timResponseMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("timResponseMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type ITimTimStreamArgs struct {
	Param *TimParam `thrift:"param,1" json:"param"`
}

func NewITimTimStreamArgs() *ITimTimStreamArgs {
	return &ITimTimStreamArgs{}
}

var ITimTimStreamArgs_Param_DEFAULT *TimParam

func (p *ITimTimStreamArgs) GetParam() *TimParam {
	if !p.IsSetParam() {
		return ITimTimStreamArgs_Param_DEFAULT
	}
	return p.Param
}
func (p *ITimTimStreamArgs) IsSetParam() bool {
	return p.Param != nil
}

func (p *ITimTimStreamArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimStreamArgs) readField1(iprot thrift.TProtocol) error {
	p.Param = &TimParam{}
	if err := p.Param.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
	}
	return nil
}

func (p *ITimTimStreamArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timStream_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimStreamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err)
	}
	if err := p.Param.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err)
	}
	return err
}

func (p *ITimTimStreamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimStreamArgs(%+v)", *p)
}

type ITimTimStarttlsArgs struct {
}

func NewITimTimStarttlsArgs() *ITimTimStarttlsArgs {
	return &ITimTimStarttlsArgs{}
}

func (p *ITimTimStarttlsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimStarttlsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timStarttls_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimStarttlsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimStarttlsArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
type ITimTimLoginArgs struct {
	Tid *Tid   `thrift:"tid,1" json:"tid"`
	Pwd string `thrift:"pwd,2" json:"pwd"`
}

func NewITimTimLoginArgs() *ITimTimLoginArgs {
	return &ITimTimLoginArgs{}
}

var ITimTimLoginArgs_Tid_DEFAULT *Tid

func (p *ITimTimLoginArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ITimTimLoginArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *ITimTimLoginArgs) GetPwd() string {
	return p.Pwd
}
func (p *ITimTimLoginArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ITimTimLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimLoginArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ITimTimLoginArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *ITimTimLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timLogin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ITimTimLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *ITimTimLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimLoginArgs(%+v)", *p)
}

// Attributes:
//  - Ab
type ITimTimAckArgs struct {
	Ab *TimAckBean `thrift:"ab,1" json:"ab"`
}

func NewITimTimAckArgs() *ITimTimAckArgs {
	return &ITimTimAckArgs{}
}

var ITimTimAckArgs_Ab_DEFAULT *TimAckBean

func (p *ITimTimAckArgs) GetAb() *TimAckBean {
	if !p.IsSetAb() {
		return ITimTimAckArgs_Ab_DEFAULT
	}
	return p.Ab
}
func (p *ITimTimAckArgs) IsSetAb() bool {
	return p.Ab != nil
}

func (p *ITimTimAckArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimAckArgs) readField1(iprot thrift.TProtocol) error {
	p.Ab = &TimAckBean{}
	if err := p.Ab.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
	}
	return nil
}

func (p *ITimTimAckArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timAck_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimAckArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ab", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err)
	}
	if err := p.Ab.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err)
	}
	return err
}

func (p *ITimTimAckArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimAckArgs(%+v)", *p)
}

// Attributes:
//  - Pbean
type ITimTimPresenceArgs struct {
	Pbean *TimPBean `thrift:"pbean,1" json:"pbean"`
}

func NewITimTimPresenceArgs() *ITimTimPresenceArgs {
	return &ITimTimPresenceArgs{}
}

var ITimTimPresenceArgs_Pbean_DEFAULT *TimPBean

func (p *ITimTimPresenceArgs) GetPbean() *TimPBean {
	if !p.IsSetPbean() {
		return ITimTimPresenceArgs_Pbean_DEFAULT
	}
	return p.Pbean
}
func (p *ITimTimPresenceArgs) IsSetPbean() bool {
	return p.Pbean != nil
}

func (p *ITimTimPresenceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimPresenceArgs) readField1(iprot thrift.TProtocol) error {
	p.Pbean = &TimPBean{}
	if err := p.Pbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
	}
	return nil
}

func (p *ITimTimPresenceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timPresence_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimPresenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err)
	}
	if err := p.Pbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err)
	}
	return err
}

func (p *ITimTimPresenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimPresenceArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type ITimTimMessageArgs struct {
	Mbean *TimMBean `thrift:"mbean,1" json:"mbean"`
}

func NewITimTimMessageArgs() *ITimTimMessageArgs {
	return &ITimTimMessageArgs{}
}

var ITimTimMessageArgs_Mbean_DEFAULT *TimMBean

func (p *ITimTimMessageArgs) GetMbean() *TimMBean {
	if !p.IsSetMbean() {
		return ITimTimMessageArgs_Mbean_DEFAULT
	}
	return p.Mbean
}
func (p *ITimTimMessageArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *ITimTimMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimMessageArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &TimMBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *ITimTimMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *ITimTimMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimMessageArgs(%+v)", *p)
}

// Attributes:
//  - ThreadId
type ITimTimPingArgs struct {
	ThreadId string `thrift:"threadId,1" json:"threadId"`
}

func NewITimTimPingArgs() *ITimTimPingArgs {
	return &ITimTimPingArgs{}
}

func (p *ITimTimPingArgs) GetThreadId() string {
	return p.ThreadId
}
func (p *ITimTimPingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimPingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ThreadId = v
	}
	return nil
}

func (p *ITimTimPingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timPing_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimPingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threadId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ThreadId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err)
	}
	return err
}

func (p *ITimTimPingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimPingArgs(%+v)", *p)
}

// Attributes:
//  - E
type ITimTimErrorArgs struct {
	E *TimError `thrift:"e,1" json:"e"`
}

func NewITimTimErrorArgs() *ITimTimErrorArgs {
	return &ITimTimErrorArgs{}
}

var ITimTimErrorArgs_E_DEFAULT *TimError

func (p *ITimTimErrorArgs) GetE() *TimError {
	if !p.IsSetE() {
		return ITimTimErrorArgs_E_DEFAULT
	}
	return p.E
}
func (p *ITimTimErrorArgs) IsSetE() bool {
	return p.E != nil
}

func (p *ITimTimErrorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimErrorArgs) readField1(iprot thrift.TProtocol) error {
	p.E = &TimError{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ITimTimErrorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timError_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimErrorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
	}
	if err := p.E.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
	}
	return err
}

func (p *ITimTimErrorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimErrorArgs(%+v)", *p)
}

type ITimTimLogoutArgs struct {
}

func NewITimTimLogoutArgs() *ITimTimLogoutArgs {
	return &ITimTimLogoutArgs{}
}

func (p *ITimTimLogoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimLogoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timLogout_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimLogoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimLogoutArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Auth
type ITimTimRegistArgs struct {
	Tid  *Tid   `thrift:"tid,1" json:"tid"`
	Auth string `thrift:"auth,2" json:"auth"`
}

func NewITimTimRegistArgs() *ITimTimRegistArgs {
	return &ITimTimRegistArgs{}
}

var ITimTimRegistArgs_Tid_DEFAULT *Tid

func (p *ITimTimRegistArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ITimTimRegistArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *ITimTimRegistArgs) GetAuth() string {
	return p.Auth
}
func (p *ITimTimRegistArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ITimTimRegistArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRegistArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ITimTimRegistArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Auth = v
	}
	return nil
}

func (p *ITimTimRegistArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRegist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRegistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ITimTimRegistArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err)
	}
	if err := oprot.WriteString(string(p.Auth)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.auth (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err)
	}
	return err
}

func (p *ITimTimRegistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRegistArgs(%+v)", *p)
}

// Attributes:
//  - Roster
type ITimTimRoserArgs struct {
	Roster *TimRoster `thrift:"roster,1" json:"roster"`
}

func NewITimTimRoserArgs() *ITimTimRoserArgs {
	return &ITimTimRoserArgs{}
}

var ITimTimRoserArgs_Roster_DEFAULT *TimRoster

func (p *ITimTimRoserArgs) GetRoster() *TimRoster {
	if !p.IsSetRoster() {
		return ITimTimRoserArgs_Roster_DEFAULT
	}
	return p.Roster
}
func (p *ITimTimRoserArgs) IsSetRoster() bool {
	return p.Roster != nil
}

func (p *ITimTimRoserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRoserArgs) readField1(iprot thrift.TProtocol) error {
	p.Roster = &TimRoster{}
	if err := p.Roster.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Roster), err)
	}
	return nil
}

func (p *ITimTimRoserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRoser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRoserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roster", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roster: ", p), err)
	}
	if err := p.Roster.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Roster), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roster: ", p), err)
	}
	return err
}

func (p *ITimTimRoserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRoserArgs(%+v)", *p)
}

// Attributes:
//  - TimMsgIq
//  - IqType
type ITimTimMessageIqArgs struct {
	TimMsgIq *TimMessageIq `thrift:"timMsgIq,1" json:"timMsgIq"`
	IqType   string        `thrift:"iqType,2" json:"iqType"`
}

func NewITimTimMessageIqArgs() *ITimTimMessageIqArgs {
	return &ITimTimMessageIqArgs{}
}

var ITimTimMessageIqArgs_TimMsgIq_DEFAULT *TimMessageIq

func (p *ITimTimMessageIqArgs) GetTimMsgIq() *TimMessageIq {
	if !p.IsSetTimMsgIq() {
		return ITimTimMessageIqArgs_TimMsgIq_DEFAULT
	}
	return p.TimMsgIq
}

func (p *ITimTimMessageIqArgs) GetIqType() string {
	return p.IqType
}
func (p *ITimTimMessageIqArgs) IsSetTimMsgIq() bool {
	return p.TimMsgIq != nil
}

func (p *ITimTimMessageIqArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimMessageIqArgs) readField1(iprot thrift.TProtocol) error {
	p.TimMsgIq = &TimMessageIq{}
	if err := p.TimMsgIq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimMsgIq), err)
	}
	return nil
}

func (p *ITimTimMessageIqArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IqType = v
	}
	return nil
}

func (p *ITimTimMessageIqArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timMessageIq_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimMessageIqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timMsgIq", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timMsgIq: ", p), err)
	}
	if err := p.TimMsgIq.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimMsgIq), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timMsgIq: ", p), err)
	}
	return err
}

func (p *ITimTimMessageIqArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iqType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iqType: ", p), err)
	}
	if err := oprot.WriteString(string(p.IqType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iqType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iqType: ", p), err)
	}
	return err
}

func (p *ITimTimMessageIqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimMessageIqArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type ITimTimMessageResultArgs struct {
	Mbean *TimMBean `thrift:"mbean,1" json:"mbean"`
}

func NewITimTimMessageResultArgs() *ITimTimMessageResultArgs {
	return &ITimTimMessageResultArgs{}
}

var ITimTimMessageResultArgs_Mbean_DEFAULT *TimMBean

func (p *ITimTimMessageResultArgs) GetMbean() *TimMBean {
	if !p.IsSetMbean() {
		return ITimTimMessageResultArgs_Mbean_DEFAULT
	}
	return p.Mbean
}
func (p *ITimTimMessageResultArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *ITimTimMessageResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimMessageResultArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &TimMBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *ITimTimMessageResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timMessageResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimMessageResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *ITimTimMessageResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimMessageResultArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
type ITimTimRemoteUserAuthArgs struct {
	Tid *Tid   `thrift:"tid,1" json:"tid"`
	Pwd string `thrift:"pwd,2" json:"pwd"`
}

func NewITimTimRemoteUserAuthArgs() *ITimTimRemoteUserAuthArgs {
	return &ITimTimRemoteUserAuthArgs{}
}

var ITimTimRemoteUserAuthArgs_Tid_DEFAULT *Tid

func (p *ITimTimRemoteUserAuthArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ITimTimRemoteUserAuthArgs_Tid_DEFAULT
	}
	return p.Tid
}

func (p *ITimTimRemoteUserAuthArgs) GetPwd() string {
	return p.Pwd
}
func (p *ITimTimRemoteUserAuthArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ITimTimRemoteUserAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *ITimTimRemoteUserAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ITimTimRemoteUserAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *ITimTimRemoteUserAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserAuthResult struct {
	Success *TimRemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewITimTimRemoteUserAuthResult() *ITimTimRemoteUserAuthResult {
	return &ITimTimRemoteUserAuthResult{}
}

var ITimTimRemoteUserAuthResult_Success_DEFAULT *TimRemoteUserBean

func (p *ITimTimRemoteUserAuthResult) GetSuccess() *TimRemoteUserBean {
	if !p.IsSetSuccess() {
		return ITimTimRemoteUserAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ITimTimRemoteUserAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ITimTimRemoteUserAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimRemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ITimTimRemoteUserAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserAuthResult(%+v)", *p)
}

// Attributes:
//  - Tid
type ITimTimRemoteUserGetArgs struct {
	Tid *Tid `thrift:"tid,1" json:"tid"`
}

func NewITimTimRemoteUserGetArgs() *ITimTimRemoteUserGetArgs {
	return &ITimTimRemoteUserGetArgs{}
}

var ITimTimRemoteUserGetArgs_Tid_DEFAULT *Tid

func (p *ITimTimRemoteUserGetArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ITimTimRemoteUserGetArgs_Tid_DEFAULT
	}
	return p.Tid
}
func (p *ITimTimRemoteUserGetArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ITimTimRemoteUserGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserGet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ITimTimRemoteUserGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserGetResult struct {
	Success *TimRemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewITimTimRemoteUserGetResult() *ITimTimRemoteUserGetResult {
	return &ITimTimRemoteUserGetResult{}
}

var ITimTimRemoteUserGetResult_Success_DEFAULT *TimRemoteUserBean

func (p *ITimTimRemoteUserGetResult) GetSuccess() *TimRemoteUserBean {
	if !p.IsSetSuccess() {
		return ITimTimRemoteUserGetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ITimTimRemoteUserGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ITimTimRemoteUserGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimRemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserGet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ITimTimRemoteUserGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserGetResult(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Ub
type ITimTimRemoteUserEditArgs struct {
	Tid *Tid         `thrift:"tid,1" json:"tid"`
	Ub  *TimUserBean `thrift:"ub,2" json:"ub"`
}

func NewITimTimRemoteUserEditArgs() *ITimTimRemoteUserEditArgs {
	return &ITimTimRemoteUserEditArgs{}
}

var ITimTimRemoteUserEditArgs_Tid_DEFAULT *Tid

func (p *ITimTimRemoteUserEditArgs) GetTid() *Tid {
	if !p.IsSetTid() {
		return ITimTimRemoteUserEditArgs_Tid_DEFAULT
	}
	return p.Tid
}

var ITimTimRemoteUserEditArgs_Ub_DEFAULT *TimUserBean

func (p *ITimTimRemoteUserEditArgs) GetUb() *TimUserBean {
	if !p.IsSetUb() {
		return ITimTimRemoteUserEditArgs_Ub_DEFAULT
	}
	return p.Ub
}
func (p *ITimTimRemoteUserEditArgs) IsSetTid() bool {
	return p.Tid != nil
}

func (p *ITimTimRemoteUserEditArgs) IsSetUb() bool {
	return p.Ub != nil
}

func (p *ITimTimRemoteUserEditArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditArgs) readField1(iprot thrift.TProtocol) error {
	p.Tid = &Tid{}
	if err := p.Tid.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditArgs) readField2(iprot thrift.TProtocol) error {
	p.Ub = &TimUserBean{}
	if err := p.Ub.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ub), err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserEdit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err)
	}
	if err := p.Tid.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err)
	}
	return err
}

func (p *ITimTimRemoteUserEditArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ub", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ub: ", p), err)
	}
	if err := p.Ub.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ub), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ub: ", p), err)
	}
	return err
}

func (p *ITimTimRemoteUserEditArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserEditArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserEditResult struct {
	Success *TimRemoteUserBean `thrift:"success,0" json:"success,omitempty"`
}

func NewITimTimRemoteUserEditResult() *ITimTimRemoteUserEditResult {
	return &ITimTimRemoteUserEditResult{}
}

var ITimTimRemoteUserEditResult_Success_DEFAULT *TimRemoteUserBean

func (p *ITimTimRemoteUserEditResult) GetSuccess() *TimRemoteUserBean {
	if !p.IsSetSuccess() {
		return ITimTimRemoteUserEditResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ITimTimRemoteUserEditResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ITimTimRemoteUserEditResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimRemoteUserBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timRemoteUserEdit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimRemoteUserEditResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ITimTimRemoteUserEditResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimRemoteUserEditResult(%+v)", *p)
}

// Attributes:
//  - Pbean
type ITimTimResponsePresenceArgs struct {
	Pbean *TimPBean `thrift:"pbean,1" json:"pbean"`
}

func NewITimTimResponsePresenceArgs() *ITimTimResponsePresenceArgs {
	return &ITimTimResponsePresenceArgs{}
}

var ITimTimResponsePresenceArgs_Pbean_DEFAULT *TimPBean

func (p *ITimTimResponsePresenceArgs) GetPbean() *TimPBean {
	if !p.IsSetPbean() {
		return ITimTimResponsePresenceArgs_Pbean_DEFAULT
	}
	return p.Pbean
}
func (p *ITimTimResponsePresenceArgs) IsSetPbean() bool {
	return p.Pbean != nil
}

func (p *ITimTimResponsePresenceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimResponsePresenceArgs) readField1(iprot thrift.TProtocol) error {
	p.Pbean = &TimPBean{}
	if err := p.Pbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
	}
	return nil
}

func (p *ITimTimResponsePresenceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timResponsePresence_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimResponsePresenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err)
	}
	if err := p.Pbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err)
	}
	return err
}

func (p *ITimTimResponsePresenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimResponsePresenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponsePresenceResult struct {
	Success *TimResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewITimTimResponsePresenceResult() *ITimTimResponsePresenceResult {
	return &ITimTimResponsePresenceResult{}
}

var ITimTimResponsePresenceResult_Success_DEFAULT *TimResponseBean

func (p *ITimTimResponsePresenceResult) GetSuccess() *TimResponseBean {
	if !p.IsSetSuccess() {
		return ITimTimResponsePresenceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ITimTimResponsePresenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ITimTimResponsePresenceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimResponsePresenceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ITimTimResponsePresenceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timResponsePresence_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimResponsePresenceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ITimTimResponsePresenceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimResponsePresenceResult(%+v)", *p)
}

// Attributes:
//  - Mbean
type ITimTimResponseMessageArgs struct {
	Mbean *TimMBean `thrift:"mbean,1" json:"mbean"`
}

func NewITimTimResponseMessageArgs() *ITimTimResponseMessageArgs {
	return &ITimTimResponseMessageArgs{}
}

var ITimTimResponseMessageArgs_Mbean_DEFAULT *TimMBean

func (p *ITimTimResponseMessageArgs) GetMbean() *TimMBean {
	if !p.IsSetMbean() {
		return ITimTimResponseMessageArgs_Mbean_DEFAULT
	}
	return p.Mbean
}
func (p *ITimTimResponseMessageArgs) IsSetMbean() bool {
	return p.Mbean != nil
}

func (p *ITimTimResponseMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimResponseMessageArgs) readField1(iprot thrift.TProtocol) error {
	p.Mbean = &TimMBean{}
	if err := p.Mbean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
	}
	return nil
}

func (p *ITimTimResponseMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timResponseMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimResponseMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mbean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err)
	}
	if err := p.Mbean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err)
	}
	return err
}

func (p *ITimTimResponseMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimResponseMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponseMessageResult struct {
	Success *TimResponseBean `thrift:"success,0" json:"success,omitempty"`
}

func NewITimTimResponseMessageResult() *ITimTimResponseMessageResult {
	return &ITimTimResponseMessageResult{}
}

var ITimTimResponseMessageResult_Success_DEFAULT *TimResponseBean

func (p *ITimTimResponseMessageResult) GetSuccess() *TimResponseBean {
	if !p.IsSetSuccess() {
		return ITimTimResponseMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ITimTimResponseMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ITimTimResponseMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ITimTimResponseMessageResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimResponseBean{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ITimTimResponseMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timResponseMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ITimTimResponseMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ITimTimResponseMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ITimTimResponseMessageResult(%+v)", *p)
}
